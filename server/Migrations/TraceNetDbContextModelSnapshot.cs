// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TraceNet.Data;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(TraceNetDbContext))]
    partial class TraceNetDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TraceNet.Models.Cable", b =>
                {
                    b.Property<string>("CableId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CableId");

                    b.ToTable("Cables");
                });

            modelBuilder.Entity("TraceNet.Models.CableConnection", b =>
                {
                    b.Property<int>("CableConnectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CableConnectionId"));

                    b.Property<string>("CableId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("FromPortId")
                        .HasColumnType("int");

                    b.Property<int>("ToPortId")
                        .HasColumnType("int");

                    b.HasKey("CableConnectionId");

                    b.HasIndex("CableId")
                        .IsUnique();

                    b.HasIndex("FromPortId")
                        .IsUnique();

                    b.HasIndex("ToPortId");

                    b.ToTable("CableConnections");
                });

            modelBuilder.Entity("TraceNet.Models.Device", b =>
                {
                    b.Property<int>("DeviceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeviceId"));

                    b.Property<bool>("EnablePing")
                        .HasColumnType("bit");

                    b.Property<string>("IPAddress")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<DateTime?>("LastCheckedAt")
                        .HasColumnType("datetime2");

                    b.Property<long?>("LatencyMs")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PortCount")
                        .HasColumnType("int");

                    b.Property<int?>("RackId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeviceId");

                    b.HasIndex("RackId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("TraceNet.Models.Port", b =>
                {
                    b.Property<int>("PortId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortId"));

                    b.Property<int?>("ConnectionCableConnectionId")
                        .HasColumnType("int");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PortId");

                    b.HasIndex("DeviceId");

                    b.ToTable("Ports");
                });

            modelBuilder.Entity("TraceNet.Models.Rack", b =>
                {
                    b.Property<int>("RackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RackId"));

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RackId");

                    b.ToTable("Racks");
                });

            modelBuilder.Entity("TraceNet.Models.CableConnection", b =>
                {
                    b.HasOne("TraceNet.Models.Cable", "Cable")
                        .WithOne("Connection")
                        .HasForeignKey("TraceNet.Models.CableConnection", "CableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TraceNet.Models.Port", "FromPort")
                        .WithOne("Connection")
                        .HasForeignKey("TraceNet.Models.CableConnection", "FromPortId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TraceNet.Models.Port", "ToPort")
                        .WithMany()
                        .HasForeignKey("ToPortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cable");

                    b.Navigation("FromPort");

                    b.Navigation("ToPort");
                });

            modelBuilder.Entity("TraceNet.Models.Device", b =>
                {
                    b.HasOne("TraceNet.Models.Rack", "Rack")
                        .WithMany("Devices")
                        .HasForeignKey("RackId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Rack");
                });

            modelBuilder.Entity("TraceNet.Models.Port", b =>
                {
                    b.HasOne("TraceNet.Models.Device", "Device")
                        .WithMany("Ports")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("TraceNet.Models.Cable", b =>
                {
                    b.Navigation("Connection");
                });

            modelBuilder.Entity("TraceNet.Models.Device", b =>
                {
                    b.Navigation("Ports");
                });

            modelBuilder.Entity("TraceNet.Models.Port", b =>
                {
                    b.Navigation("Connection");
                });

            modelBuilder.Entity("TraceNet.Models.Rack", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
