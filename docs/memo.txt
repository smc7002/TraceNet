

========================================= EF Core =========================================

# 서버 실행
dotnet run --project server // 서버 프로젝트 실행
dotnet run --launch-profile http --project server // http 프로필로 실행

# 데이터베이스 관리
dotnet ef database drop // 프로젝트에 연결된 모든 db 삭제
dotnet ef database update // db 업데이트

# 마이그레이션 관리
dotnet ef migrations add InitialCreate // 초기 마이그레이션 생성
dotnet ef migrations add AddDeviceStatusTracking // 기능별 마이그레이션 추가
dotnet ef migrations list // 마이그레이션 목록 확인
dotnet ef migrations remove // 마지막 마이그레이션 제거 (미적용 상태일 때만)

# 데이터베이스 정보
dotnet ef database update --info // 업데이트 정보 미리보기 (실제 실행 안함)
dotnet ef dbcontext info // DbContext 정보 확인
dotnet ef dbcontext list // 사용 가능한 DbContext 목록

# 스크립트 생성
dotnet ef migrations script // 전체 마이그레이션 SQL 스크립트 생성
dotnet ef migrations script 20241201_Initial 20241205_AddPorts // 특정 범위 스크립트
dotnet ef migrations script --output migration.sql // 파일로 출력

# 개발/운영 환경 분리
dotnet ef database update --environment Production // 운영 환경 업데이트
dotnet ef database update --connection "Server=prod;Database=TraceNet;..." // 연결문자열 직접 지정

# 데이터베이스 백업/복원 (개발용)
dotnet ef database update 20241201_Initial // 특정 마이그레이션까지만 적용
dotnet ef database update 0 // 모든 마이그레이션 롤백 (빈 DB로)

# 문제 해결
dotnet ef database drop --force // 확인 없이 강제 삭제
dotnet clean && dotnet build // 빌드 캐시 정리 후 재빌드
dotnet ef migrations remove --force // 강제로 마이그레이션 제거

# 패키지 관리
dotnet add package Microsoft.EntityFrameworkCore.Tools // EF 도구 추가
dotnet add package Microsoft.EntityFrameworkCore.SqlServer // SQL Server 프로바이더

# 성능 및 디버깅
dotnet ef database update --verbose // 상세한 로그 출력
dotnet ef migrations script --idempotent // 멱등성 보장 스크립트 (중복 실행 안전)



========================================= LINQ Queries =========================================

[ 디바이스/포트 목록 조회 ]

var devices = await _context.Devices
    .Include(d => d.Ports)
    .ToListAsync();


[ 케이블 전체 목록 + 연결 정보 포함 조회 ]

var cables = await _context.Cables
    .Include(c => c.Connection)
        .ThenInclude(conn => conn.FromPort)
            .ThenInclude(p => p.Device)
    .Include(c => c.Connection)
        .ThenInclude(conn => conn.ToPort)
            .ThenInclude(p => p.Device)
    .ToListAsync();


[ 특정 디바이스 ID의 포트 목록 보기 ]

var ports = await _context.Ports
    .Where(p => p.DeviceId == targetDeviceId)
    .ToListAsync();


[ 특정 포트에서 출발하거나 도착하는 케이블 조회 ]

var cable = await _context.CableConnections
    .Include(c => c.Cable)
    .FirstOrDefaultAsync(c =>
        c.FromPortId == targetPortId || c.ToPortId == targetPortId);


[ 특정 디바이스의 모든 연결된 디바이스 찾기 ]

var connections = await _context.CableConnections
    .Include(c => c.Cable)
    .Include(c => c.FromPort).ThenInclude(p => p.Device)
    .Include(c => c.ToPort).ThenInclude(p => p.Device)
    .Where(c =>
        c.FromPort.DeviceId == currentDeviceId || 
        c.ToPort.DeviceId == currentDeviceId)
    .ToListAsync();



========================================= SQL Quries =========================================

[ 기본 ]

SELECT * FROM Devices;
SELECT * FROM Cables;
SELECT * FROM Ports;
SELECT * FROM CableConnections;
SELECT * FROM Racks;


[ 모든 장비 목록, 포트 수 확인 ]    

SELECT 
    d.DeviceId,
    d.Name AS DeviceName,
    d.Type AS DeviceType,
    d.IPAddress,
    COUNT(p.PortId) AS PortCount
FROM Devices d
LEFT JOIN Ports p ON d.DeviceId = p.DeviceId
GROUP BY d.DeviceId, d.Name, d.Type, d.IPAddress
ORDER BY d.DeviceId;


[ 전체 케이블 연결 상태 ]

SELECT 
    c.CableId,
    c.Description,
    d1.Name AS FromDevice,
    p1.Name AS FromPort,
    d2.Name AS ToDevice,
    p2.Name AS ToPort
FROM Cables c
JOIN CableConnections cc ON c.CableId = cc.CableId
JOIN Ports p1 ON cc.FromPortId = p1.PortId
JOIN Devices d1 ON p1.DeviceId = d1.DeviceId
JOIN Ports p2 ON cc.ToPortId = p2.PortId
JOIN Devices d2 ON p2.DeviceId = d2.DeviceId
ORDER BY c.CableId;


[ 서버 장비 있는지 확인 ]

SELECT * FROM Devices
WHERE Type = 'Server';


[ 각 포트의 연결 여부 ]

SELECT 
    p.PortId,
    p.Name AS PortName,
    d.Name AS DeviceName,
    cc.CableId
FROM Ports p
JOIN Devices d ON p.DeviceId = d.DeviceId
LEFT JOIN CableConnections cc ON p.PortId = cc.FromPortId OR p.PortId = cc.ToPortId
ORDER BY d.DeviceId, p.PortId;

[ 테이블 이름 확인 ]

SELECT 
    TABLE_SCHEMA,
    TABLE_NAME
FROM INFORMATION_SCHEMA.TABLES
WHERE TABLE_TYPE = 'BASE TABLE'
ORDER BY TABLE_SCHEMA, TABLE_NAME;


[ 간단한 연결 방향 확인 ]
SELECT TOP 10
    d1.Name AS FromDevice,
    d1.Type AS FromType,
    d2.Name AS ToDevice, 
    d2.Type AS ToType
FROM CableConnections cc
JOIN Ports p1 ON cc.FromPortId = p1.PortId
JOIN Ports p2 ON cc.ToPortId = p2.PortId  
JOIN Devices d1 ON p1.DeviceId = d1.DeviceId
JOIN Devices d2 ON p2.DeviceId = d2.DeviceId;


[ DB 전부 초기화 ]
// Ports 테이블 참조 끊기
UPDATE Ports SET ConnectionCableConnectionId = NULL; 

DELETE FROM CableConnections;
DELETE FROM Cables;
DELETE FROM Ports;
DELETE FROM Devices;
DELETE FROM Racks;

 // 특정 디바이스 삭제
DELETE FROM CableConnections
WHERE FromPortId IN (SELECT PortId FROM Ports WHERE DeviceId = 22)
   OR ToPortId IN (SELECT PortId FROM Ports WHERE DeviceId = 22);
DELETE FROM Ports
WHERE DeviceId = 22;
DELETE FROM Devices
WHERE DeviceId = 22;


========================================= VS Code =========================================

코드 편집 & 네비게이션

Ctrl + D: 현재 줄 복사
Ctrl + L: 현재 줄 삭제
Ctrl + Shift + L: 현재 줄 전체 선택
Alt + ↑/↓: 선택한 줄 위/아래로 이동
Ctrl + G: 특정 줄 번호로 이동
Ctrl + K, Ctrl + 0(zero): 현재 파일의 모든 코드 블록 접기
Ctrl + K, Ctrl + J: 현재 파일의 모든 코드 블록 펼치기

검색 & 찾기

Ctrl + F: 현재 파일에서 찾기
Ctrl + H: 찾기 및 바꾸기
Ctrl + Shift + F: 전체 솔루션에서 찾기
F3 / Shift + F3: 다음/이전 검색 결과로 이동
Ctrl + T: 파일, 타입, 멤버 빠른 검색 (Go to All)

코드 분석 & 리팩토링

F12: 정의로 이동 (Go to Definition)
Ctrl + F12: 구현으로 이동 (Go to Implementation)
Shift + F12: 모든 참조 찾기
Ctrl + K, Ctrl + I: 빠른 정보 보기 (Quick Info)
Ctrl + .: 빠른 작업 및 리팩토링 메뉴
F2: 이름 바꾸기 (Rename)

디버깅

F5: 디버깅 시작
F9: 중단점 설정/해제
F10: 한 줄씩 실행 (Step Over)
F11: 함수 안으로 들어가기 (Step Into)
Shift + F11: 함수에서 나오기 (Step Out)
Ctrl + F5: 디버깅 없이 시작

IntelliSense & 자동완성

Ctrl + Space: IntelliSense 강제 실행
Ctrl + Shift + Space: 매개변수 정보 보기
Ctrl + K, Ctrl + C: 주석 처리
Ctrl + K, Ctrl + U: 주석 해제
Ctrl + K, Ctrl + D: 문서 서식 지정
Ctrl + K, Ctrl + F: 선택 영역 서식 지정

창 관리

Ctrl + Tab: 열린 문서 간 전환
Ctrl + F4: 현재 문서 닫기
Alt + Tab: 애플리케이션 간 전환
Ctrl + Alt + L: Solution Explorer 포커스
Ctrl + , E: Error List 보기

빌드 & 실행

Ctrl + Shift + B: 솔루션 빌드
F6: 현재 프로젝트 빌드
Ctrl + Break: 빌드 중지

고급 편집

Ctrl + K, Ctrl + S: 코드 감싸기 (Surround With)
Ctrl + Shift + V: 클립보드 기록 순환
Alt + Enter: 전체 화면 모드 전환
Ctrl + -: 이전 위치로 돌아가기
Ctrl + Shift + -: 다음 위치로 이동


----------------- 📘 정규식 검색 패턴 모음 (VS Code 기준) -----------------
🔤 문자열 관련

foo|bar → foo 또는 bar 찾기

^hello → **줄의 시작이 hello**인 경우

world$ → **줄의 끝이 world**인 경우

^$ → 빈 줄 찾기

🔢 숫자 관련

\d+ → 숫자 하나 이상 (0~9)

\d{4} → 정확히 4자리 숫자 (예: 연도 2025)

\d{2,4} → 2~4자리 숫자

\b\d+\b → 단어 경계 안의 독립된 숫자

✍️ 문자 관련

\w+ → 단어(영문자+숫자+언더스코어) 하나 이상

\W+ → 단어 문자가 아닌 것들 (공백, 특수문자 등)

[A-Z] → 대문자 1개

[a-z] → 소문자 1개

[A-Za-z0-9] → 영문자+숫자 한 글자

📑 특수 상황

.{5} → 아무 문자나 5개

.* → 아무 문자 0개 이상

.+ → 아무 문자 1개 이상

\s+ → 공백(스페이스, 탭, 개행) 하나 이상

\S+ → 공백이 아닌 문자 하나 이상

💡 실전 예시

public\s+\w+\s+\w+\(
→ C# 메서드 선언 찾기 (public int GetData( 같은)

class\s+\w+
→ 클래스 선언부 찾기 (class DeviceService)

<.*?>
→ HTML/XML 태그 찾기 (<div>, <p> 등)

//.*
→ 한 줄 주석 찾기 (//로 시작하는 부분)