{
  "info": {
    "name": "TraceNet - Smoke & Trace",
    "_postman_id": "tracenet-smoke",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_exporter_id": "chatgpt"
  },
  "item": [
    {
      "name": "01 - Health (대체: devices)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "// health 엔드포인트가 없다면 200이 아니어도 실패로 보지 않고, 다음 요청으로 진행합니다.",
              "pm.test(\"요청 성공(2xx/3xx)\", function () {",
              "  pm.expect(pm.response.code).to.be.within(200,399);",
              "});",
              "",
              "// 응답시간 가이드(일반 API)",
              "const limit = parseInt(pm.environment.get('API_P95_MS')||'800',10);",
              "pm.test(`응답시간 < ${limit}ms`, function () {",
              "  pm.expect(pm.response.responseTime).to.be.below(limit);",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{BASE_URL}}/health/z",
          "host": ["{{BASE_URL}}"],
          "path": ["health","z"]
        }
      }
    },
    {
      "name": "02 - Devices (PC 자동 선택)",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);",
              "const data = pm.response.json();",
              "pm.test('배열 형태', ()=> Array.isArray(data));",
              "",
              "const min = parseInt(pm.environment.get('DEVICES_MIN')||'300',10);",
              "pm.test(`디바이스 개수 >= ${min}`, ()=> data.length >= min);",
              "",
              "// PC 하나 자동 선택 (type 필드가 없다면 이름 규칙/포트 수 등으로 보정)",
              "let pc = data.find(d => (d.type||'').toLowerCase() === 'pc');",
              "if(!pc){",
              "  pc = data.find(d => (d.name||'').toUpperCase().includes('PC'));",
              "}",
              "if(!pc && data.length){ pc = data[0]; }",
              "pm.test('TRACE 대상 디바이스 선택', ()=> !!pc);",
              "if(pc){",
              "  const id = pc.deviceId || pc.id || pc.name;",
              "  pm.environment.set('TRACE_DEVICE_ID', id);",
              "  console.log('TRACE_DEVICE_ID =', id);",
              "}",
              "",
              "// 응답시간 체크",
              "const limit = parseInt(pm.environment.get('API_P95_MS')||'800',10);",
              "pm.test(`응답시간 < ${limit}ms`, ()=> pm.response.responseTime < limit);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": { "raw": "{{BASE_URL}}/api/devices", "host": ["{{BASE_URL}}"], "path": ["api", "devices"] }
      }
    },
    {
      "name": "03 - Cables",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);",
              "const data = pm.response.json();",
              "pm.test('배열 형태', ()=> Array.isArray(data));",
              "pm.test('케이블 1개 이상', ()=> data.length >= 1);",
              "",
              "const limit = parseInt(pm.environment.get('API_P95_MS')||'800',10);",
              "pm.test(`응답시간 < ${limit}ms`, ()=> pm.response.responseTime < limit);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": { "raw": "{{BASE_URL}}/api/cables", "host": ["{{BASE_URL}}"], "path": ["api", "cables"] }
      }
    },
    {
      "name": "04 - Trace (선택된 PC)",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "if(!pm.environment.get('TRACE_DEVICE_ID')){",
              "  throw new Error('TRACE_DEVICE_ID 환경변수가 비어있습니다. 먼저 Devices 요청이 실행되어야 합니다.');",
              "}"
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('200 OK', () => pm.response.code === 200);",
              "const body = pm.response.json();",
              "pm.test('Path 또는 Cables 존재', ()=> !!(body.path || body.cables));",
              "",
              "// Trace 성능 가이드",
              "const limit = parseInt(pm.environment.get('TRACE_P95_MS')||'2000',10);",
              "pm.test(`응답시간 < ${limit}ms`, ()=> pm.response.responseTime < limit);"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "url": {
          "raw": "{{BASE_URL}}/api/trace/{{TRACE_DEVICE_ID}}",
          "host": ["{{BASE_URL}}"],
          "path": ["api", "trace", "{{TRACE_DEVICE_ID}}"]
        }
      }
    }
  ]
}
